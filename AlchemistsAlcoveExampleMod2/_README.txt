Hi!! This is an Example Mod intended to help guide users on how to make mods for Alchemist's Alcove. It relies on some information taught in the previous guide, so if you haven't checked out AlchemistsAlcoveExampleMod1, be sure to do so before reading through this!!


As a refresher to the necessary syntax:

To begin making an Object, you'll need to begin your txt file with a path to the class it will be instanced from.
Here is the syntax for setting an Object's class:
(class):(<path/to/class.tres>);

If you'd prefer not to start from scratch and instead duplicate an existing Object, use this syntax:
(duplicate):(<path/to/obj>);

From there, we can start setting our Object's values! Remember, not all of these will need to be filled in manually -- each class has default values!
Here is the syntax for setting an Object's attribute:
(<attribute_name>):(<value>);
Keep in mind, sometimes a value will need to be duplicated in order to separate it from its base instance. Otherwise, you will find multiple references to the same instance, all sharing the same values. You can denote that a File or Object needs to be duplicated by using apostrophes, like so:
('<value>');

Some Objects have attributes that are Arrays!
Here is the syntax for appending a value to an Object's Array:
([<array_name>]):(<value>);
If you want to set the value of an array at an index instead of appending, you can do so using the following syntax:
([<array_name>][<index>]):(<value>);

All lines should be suffixed by a semicolon like so!
(<param1>):(<param2>);



MAKING TAGS

This lesson will focus on Tags and Overriding Content! We'll be making a Blue Goblin to replace the current in-game Goblin. It'll wield a Blue Spark that will deal a custom damage type: Blue!

Just like before, we need to start at the beginning -- but this time, the beginning is making a tag! 



Let's start by instantiating our Tag Object! The Tag Class is located at "res://classes/tag.gd".
(class):(res://classes/tag.gd);

Tags are comprised of a Name, ID, and Color. Let's set those here!
(name):(Blue);
(id):(blue);
(color):(#5677fc);


And our Tag is done, just like that! Let's name our file "BlueTag.txt".
```
(class):(res://classes/tag.gd);
(name):(Blue);
(id):(blue);
(color):(#5677fc);
```


RECAP

Next up, let's make a SimpleDealDamage Behavior. We don't need to go through it all again though -- we can simply repurpose our file from last time, and tweak some values here and there!

Let's name our file "BlueSparkDealDamage.txt".

```
(class):(res://classes/behaviors/spell_behaviors/simple_act_deal_damage.gd);
([tags]):(mod://BlueTag.txt);
(beam):(true);
([dmg][0]):(5);
```

Note that the Behavior's damage Tag is our Blue Tag! This means that when damage is dealt, the computer will calculate the damage based on a Unit's Resistance to our Blue Tag!

Not only that, but it means we'll need a custom damage display for our Tag! Whenever damage is dealt, it is displayed to us as a sprite generated by the computer. The game will automatically grab the first instance of "dmg_<tag_id>.png" it finds for any Tag loaded during the Mod-Loading process. 

Because our Tag's ID is "blue", we can place a file named "dmg_blue.png" anywhere within our Mod folder and the game will recognize it as the Blue Tag's damage display texture! For now, "dmg_blue.png" is located at "mod://sprites/dmg_blue.png".



Now let's move onto the Blue Spark Item! Again, we can just repurpose some previous text here in a file named "BlueSparkItem.txt":
```
(class):(res://classes/item.gd);
(name):(Blue Spark);
(id):(blue_spark);
(texture):(mod://sprites/blue_spark.png);
([tags]):(res://resources/tags/item_tags/spell.tres);
([tags]):(mod://BlueTag.txt);
(range):(3);
([behaviors]):(mod://BlueSparkDealDamage.txt);
(postname_description):(You wield the {power_of_Blue:blue}.)
```

Note that in "postname_description" we use curly brackets! This is to tell the computer that it should recolor the text within the curly brackets to the color of the Tag ID on the right. We need to use underscores ("_") to replace spaces, as the computer uses spaces to separate words in descriptions! Here's the syntax for colored descriptions:
{<text_to_recolor>:<tag_id>}



OVERRIDING CONTENT

Now that we've made our own Behaviors, Items, Units, Spawners, and even Recipes, let's try something new: overriding existing content!

Alchemist's Alcove functions using the IDs of its Objects. However, if two Objects with the same ID have been loaded, then the Dictionary used by Alchemist's Alcove will use the ID to refer to the ***most recently loaded*** object!

This means that we can replace existing Objects by creating a new Object with the same ID!

Let's turn the Goblin into a Blue Goblin!



To start off with, we're actually *not* going to be defining a class. Instead, we'll be using the "(duplicate)" keyword to tell the engine that our Object is going to be a duplicate of an existing Object. The Goblin Object is located at "res://resources/units/goblin_tribe_hob.tres".
(duplicate):(res://resources/units/goblin_tribe_hob.tres);

This will create an Object that has all of the same values as the Object it references! However, we can change those up:

Next, let's set the Goblin's texture to the Blue Goblin texture located in our mod files!
(texture):(mod://sprites/blue_goblin.png);

And let's change its name to Blue Goblin!
(name):(Blue Goblin);
We won't need to give the Blue Goblin an ID, as it's already inherited the ID from the Goblin we duplicated.

Let's give our Blue Goblin a Tag as well:
([tags]):(mod://BlueTag.txt);

And, most importantly, equip it with the Blue Spark Item we made!
([inventory][0]):(mod://BlueSparkItem.txt);

And that's all we need to do! Because our Object copied the Goblin's ID, the game will load in our new Blue Goblin Object in the ID "goblin_tribe_hob", and any in-game Objects that would reference that ID will instead reference our new Blue Goblin Object!


Let's name our file "GoblinOverride.txt"


```
(duplicate):(res://resources/units/goblin_tribe_hob.tres);
(texture):(mod://sprites/blue_goblin.png);
(name):(Blue Goblin);
([tags]):(mod://BlueTag.txt);
([inventory][0]):(mod://BlueSparkItem.txt);
```

Because we haven't changed the ID, and our Blue Goblin Unit has its values by default copied from the Goblin Unit, this includes the ID -- which means that our Blue Goblin has the same ID as the Goblin! When the Blue Goblin is loaded by the game, it will override all ID references to Goblin.

If you want to make a new Object from scratch and override an existing Object, you can simply create the new Object as normal and set its ID to the existing Object's ID like so:
(id):(<object_id>);


FINISHING OUR MOD

And now, we make our ModMaster.txt file just like before!

```
mod://GoblinOverride.txt
```


And our Mod is COMPLETE!!! We've successfully created a Mod that will replace the existing Goblin Object with our custom Blue Goblin Object in all Objects that reference the Goblin Object! When we run Alchemist's Alcove, we'll find that all Goblins in the game have been replaced with Blue Goblins!